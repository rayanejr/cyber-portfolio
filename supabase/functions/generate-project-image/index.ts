import { serve } from "https://deno.land/std@0.168.0/http/server.ts";
import { createClient } from "https://esm.sh/@supabase/supabase-js@2.7.1";

const corsHeaders = {
  "Access-Control-Allow-Origin": "*",
  "Access-Control-Allow-Headers": "authorization, x-client-info, apikey, content-type",
};

serve(async (req) => {
  if (req.method === "OPTIONS") {
    return new Response(null, { headers: corsHeaders });
  }

  try {
    const { title, technologies } = await req.json();

    if (!title) {
      return new Response(
        JSON.stringify({ error: "Title is required" }),
        { status: 400, headers: { ...corsHeaders, "Content-Type": "application/json" } }
      );
    }

    const supabaseUrl = Deno.env.get("SUPABASE_URL")!;
    const supabaseKey = Deno.env.get("SUPABASE_SERVICE_ROLE_KEY")!;
    const openaiApiKey = Deno.env.get("OPENAI_API_KEY");
    
    if (!openaiApiKey) {
      console.error('OPENAI_API_KEY not configured');
      return new Response(
        JSON.stringify({ error: "OpenAI API key not configured. Please add it in Supabase secrets." }),
        { status: 500, headers: { ...corsHeaders, "Content-Type": "application/json" } }
      );
    }
    
    const supabase = createClient(supabaseUrl, supabaseKey);

    console.log(`Generating image for: ${title}`);
    
    // Generate image with OpenAI
    const techList = technologies?.join(", ") || "";
    const imagePrompt = `Professional cybersecurity portfolio project image. 
Project: "${title}"
Technologies: ${techList}
Style: Modern dark cyber aesthetic, neon blue/purple accents, digital elements, technological feel, professional, sleek. 
Format: 16:9 aspect ratio, high quality.`;

    console.log('Calling OpenAI API...');
    const imageResponse = await fetch("https://api.openai.com/v1/images/generations", {
      method: "POST",
      headers: {
        "Authorization": `Bearer ${openaiApiKey}`,
        "Content-Type": "application/json",
      },
      body: JSON.stringify({
        model: "gpt-image-1",
        prompt: imagePrompt,
        n: 1,
        size: "1536x1024",
        quality: "high",
        output_format: "png"
      })
    });

    if (!imageResponse.ok) {
      const errorText = await imageResponse.text();
      console.error('OpenAI API error:', imageResponse.status, errorText);
      throw new Error(`OpenAI API error: ${imageResponse.statusText}`);
    }

    const imageData = await imageResponse.json();
    console.log('OpenAI response received');
    
    const imageBase64 = imageData.data?.[0]?.b64_json;

    if (!imageBase64) {
      console.error('No image in OpenAI response:', JSON.stringify(imageData));
      throw new Error("No image generated by OpenAI");
    }

    // Convert base64 to buffer
    console.log('Converting image to buffer...');
    const imageBuffer = Uint8Array.from(atob(imageBase64), c => c.charCodeAt(0));

    // Upload to Supabase Storage
    const fileName = `${title.toLowerCase().replace(/[^a-z0-9]+/g, '-')}-${Date.now()}.png`;
    const { data: uploadData, error: uploadError } = await supabase.storage
      .from('projects')
      .upload(fileName, imageBuffer, {
        contentType: 'image/png',
        upsert: false
      });

    if (uploadError) {
      throw uploadError;
    }

    // Get public URL
    const { data: { publicUrl } } = supabase.storage
      .from('projects')
      .getPublicUrl(fileName);

    console.log(`âœ“ Image generated and uploaded: ${publicUrl}`);

    return new Response(
      JSON.stringify({ 
        success: true, 
        imageUrl: publicUrl 
      }),
      {
        headers: { ...corsHeaders, "Content-Type": "application/json" },
        status: 200,
      }
    );

  } catch (error) {
    console.error("Error:", error);
    return new Response(
      JSON.stringify({ error: error.message }),
      {
        headers: { ...corsHeaders, "Content-Type": "application/json" },
        status: 500,
      }
    );
  }
});
