import { serve } from "https://deno.land/std@0.190.0/http/server.ts";

const corsHeaders = {
  'Access-Control-Allow-Origin': '*',
  'Access-Control-Allow-Headers': 'authorization, x-client-info, apikey, content-type',
};

serve(async (req: Request) => {
  if (req.method === 'OPTIONS') {
    return new Response(null, { headers: corsHeaders });
  }

  try {
    const { target, scanType } = await req.json();
    
    console.log(`üîç Starting vulnerability scan on ${target} with ${scanType}`);
    
    // Scanner r√©el de vuln√©rabilit√©s web basiques
    const vulnerabilities = [];
    const checks = {
      sqlInjection: false,
      xss: false,
      csrf: false,
      securityHeaders: false,
      httpsEnforcement: false,
      informationDisclosure: false
    };

    try {
      // Test 1: V√©rifier HTTPS
      if (!target.startsWith('https://')) {
        vulnerabilities.push({
          type: 'HTTPS Not Enforced',
          severity: 'MEDIUM',
          description: 'Le site n\'utilise pas HTTPS ou ne le force pas'
        });
        checks.httpsEnforcement = true;
      }

      // Test 2: Tester les en-t√™tes de s√©curit√©
      const response = await fetch(target, { 
        method: 'HEAD',
        signal: AbortSignal.timeout(10000)
      });

      const headers = response.headers;
      
      if (!headers.get('x-frame-options')) {
        vulnerabilities.push({
          type: 'Missing X-Frame-Options',
          severity: 'MEDIUM',
          description: 'Vuln√©rable au clickjacking'
        });
        checks.securityHeaders = true;
      }

      if (!headers.get('content-security-policy')) {
        vulnerabilities.push({
          type: 'Missing Content-Security-Policy',
          severity: 'HIGH',
          description: 'Pas de politique de s√©curit√© du contenu'
        });
        checks.xss = true;
      }

      if (!headers.get('x-content-type-options')) {
        vulnerabilities.push({
          type: 'Missing X-Content-Type-Options',
          severity: 'LOW',
          description: 'MIME type sniffing possible'
        });
        checks.securityHeaders = true;
      }

      if (!headers.get('strict-transport-security')) {
        vulnerabilities.push({
          type: 'Missing HSTS',
          severity: 'HIGH',
          description: 'Pas de politique de transport s√©curis√©'
        });
      }

      // Test 3: Divulgation d'informations
      const serverHeader = headers.get('server');
      if (serverHeader && (serverHeader.includes('Apache') || serverHeader.includes('nginx'))) {
        vulnerabilities.push({
          type: 'Information Disclosure',
          severity: 'LOW',
          description: `Version du serveur expos√©e: ${serverHeader}`
        });
        checks.informationDisclosure = true;
      }

      const xPoweredBy = headers.get('x-powered-by');
      if (xPoweredBy) {
        vulnerabilities.push({
          type: 'Information Disclosure',
          severity: 'LOW',
          description: `Technologie backend expos√©e: ${xPoweredBy}`
        });
        checks.informationDisclosure = true;
      }

    } catch (error) {
      console.error('Scan error:', error);
      vulnerabilities.push({
        type: 'Scan Error',
        severity: 'INFO',
        description: 'Impossible d\'acc√©der √† la cible ou timeout'
      });
    }

    // Calcul du niveau de risque
    const highSeverity = vulnerabilities.filter(v => v.severity === 'HIGH').length;
    const mediumSeverity = vulnerabilities.filter(v => v.severity === 'MEDIUM').length;
    
    let riskLevel = 'Low';
    if (highSeverity > 2 || (highSeverity > 0 && mediumSeverity > 2)) {
      riskLevel = 'Critical';
    } else if (highSeverity > 0 || mediumSeverity > 2) {
      riskLevel = 'High';
    } else if (mediumSeverity > 0) {
      riskLevel = 'Medium';
    }

    const result = {
      scanType: scanType || 'Security Headers & Configuration',
      target,
      vulnerabilities,
      totalFound: vulnerabilities.length,
      riskLevel,
      checksPerformed: Object.keys(checks).filter(k => checks[k as keyof typeof checks]).length,
      scanTimestamp: new Date().toISOString(),
      recommendations: [
        vulnerabilities.length > 0 ? 'Impl√©menter les en-t√™tes de s√©curit√© manquants' : 'Continuer le monitoring',
        'Utiliser HTTPS avec HSTS',
        'Configurer une CSP stricte',
        'Masquer les versions des serveurs'
      ]
    };

    console.log(`‚úÖ Scan completed: ${vulnerabilities.length} vulnerabilities found`);

    return new Response(JSON.stringify(result), {
      headers: { ...corsHeaders, 'Content-Type': 'application/json' },
    });

  } catch (error: any) {
    console.error('‚ùå Error in vulnerability scanner:', error);
    return new Response(
      JSON.stringify({ 
        error: error.message,
        scanType: 'Error',
        vulnerabilities: [],
        riskLevel: 'Unknown'
      }),
      {
        status: 500,
        headers: { ...corsHeaders, 'Content-Type': 'application/json' },
      }
    );
  }
});
