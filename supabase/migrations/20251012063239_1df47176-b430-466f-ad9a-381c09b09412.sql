-- Enrichissement des descriptions détaillées de tous les projets

-- 1. PFE Santé-App
UPDATE projects 
SET content = E'## 📋 Contexte du projet\n\nProjet de fin d\'études réalisé dans le cadre de mon diplôme d\'ingénieur en cybersécurité. L\'objectif était de concevoir un écosystème complet de e-santé permettant aux patients de suivre leur santé et aux professionnels de santé de gérer leurs consultations.\n\n## 🎯 Objectifs\n\n- Créer une plateforme web responsive pour le suivi médical\n- Développer une API REST sécurisée avec authentification JWT\n- Concevoir une application mobile native pour les patients\n- Garantir la sécurité et la confidentialité des données médicales (RGPD)\n\n## 🔧 Technologies utilisées\n\n**Frontend Web (React)**\n- React 18 avec Hooks et Context API\n- Chart.js pour la visualisation des données médicales\n- Tailwind CSS pour le design responsive\n- Axios pour les appels API\n\n**Backend (Laravel)**\n- Laravel 9 avec architecture MVC\n- JWT Authentication (tymon/jwt-auth)\n- Eloquent ORM pour la gestion des données\n- Validation stricte des entrées\n- Rate limiting et protection CSRF\n\n**Mobile (React Native)**\n- React Native avec Expo\n- Navigation React Navigation\n- Notifications push pour les rappels de rendez-vous\n- AsyncStorage pour le cache local\n\n## 💡 Défis techniques relevés\n\n1. **Sécurisation des données médicales** : Chiffrement AES-256 des données sensibles, transmission HTTPS uniquement, gestion fine des permissions\n2. **Synchronisation temps réel** : WebSockets pour les notifications instantanées entre médecin et patient\n3. **Performance mobile** : Optimisation du chargement des images médicales, mise en cache intelligente\n4. **Architecture scalable** : Séparation claire des responsabilités, API RESTful bien documentée\n\n## 📊 Résultats\n\n- ✅ Plateforme multi-plateforme 100% fonctionnelle\n- ✅ Authentification sécurisée avec refresh tokens\n- ✅ Conformité RGPD complète\n- ✅ Interface utilisateur intuitive validée par tests utilisateurs\n- ✅ Documentation technique complète (API, architecture, déploiement)\n\n## 🎓 Compétences développées\n\nArchitecture full-stack, sécurité applicative, développement mobile, gestion de projet, méthodologie Agile'
WHERE title = 'PFE – Santé-App (React / Laravel / React-Native)';

-- 2. CyberDéfense & Sécurité Web
UPDATE projects 
SET content = E'## 📋 Contexte du projet\n\nMise en place d\'un laboratoire de sécurité applicative pour comprendre les vulnérabilités web les plus critiques et apprendre à les corriger. Projet réalisé dans le cadre de ma spécialisation en cybersécurité.\n\n## 🎯 Objectifs\n\n- Créer un environnement d\'apprentissage sécurisé pour tester les vulnérabilités\n- Identifier et exploiter les failles OWASP Top 10\n- Implémenter les correctifs de sécurité appropriés\n- Documenter les bonnes pratiques de sécurisation\n\n## 🔧 Technologies et outils\n\n**Environnement de test**\n- Docker pour l\'isolation des environnements\n- DVWA (Damn Vulnerable Web Application)\n- WebGoat pour l\'apprentissage guidé\n- Burp Suite Community pour l\'analyse des requêtes\n\n**Langages et frameworks**\n- PHP pour les applications vulnérables\n- JavaScript pour les attaques XSS\n- SQL pour les injections\n- Python pour l\'automatisation des tests\n\n## 💡 Vulnérabilités étudiées\n\n### 1. Injection SQL (SQLi)\n- **Exploitation** : Récupération de données sensibles, contournement d\'authentification\n- **Correctif** : Requêtes préparées (PDO), validation stricte des entrées, principe du moindre privilège\n\n### 2. Cross-Site Scripting (XSS)\n- **Types** : Reflected XSS, Stored XSS, DOM-based XSS\n- **Exploitation** : Vol de cookies, injection de scripts malveillants\n- **Correctif** : Échappement HTML, Content Security Policy (CSP), HttpOnly cookies\n\n### 3. Cross-Site Request Forgery (CSRF)\n- **Exploitation** : Actions non autorisées au nom de l\'utilisateur\n- **Correctif** : Tokens CSRF, vérification de l\'origine, SameSite cookies\n\n### 4. Autres vulnérabilités\n- Broken Authentication\n- Sensitive Data Exposure\n- XML External Entities (XXE)\n- Broken Access Control\n\n## 📊 Exercices pratiques réalisés\n\n1. ✅ Exploitation complète d\'une SQLi pour extraire une base de données\n2. ✅ Création d\'un payload XSS pour voler des sessions\n3. ✅ Bypass de filtres de sécurité mal configurés\n4. ✅ Implémentation de CSP headers complets\n5. ✅ Audit de sécurité d\'une application web complète\n\n## 🎓 Compétences développées\n\nPentest web, sécurité applicative, OWASP Top 10, remédiation de vulnérabilités, configuration de headers de sécurité, audit de code'
WHERE title = 'CyberDéfense & Sécurité Web';

-- 3. Automatisation Inventaire GLPI
UPDATE projects 
SET content = E'## 📋 Contexte du projet\n\nLe Laboratoire National de métrologie et d\'Essais (LNE) possède un parc réseau Cisco conséquent. L\'inventaire manuel des équipements réseau prenait plusieurs heures et comportait des risques d\'erreurs. Mission : automatiser complètement ce processus.\n\n## 🎯 Objectifs\n\n- Automatiser la collecte d\'informations sur les switches Cisco\n- Intégrer automatiquement les données dans GLPI (gestion d\'inventaire IT)\n- Réduire drastiquement le temps d\'inventaire\n- Éliminer les erreurs de saisie manuelle\n\n## 🔧 Stack technique\n\n**Langages et bibliothèques**\n- Python 3.9+\n- Paramiko pour les connexions SSH aux équipements\n- Requests pour les appels à l\'API REST GLPI\n- TextFSM pour le parsing des sorties CLI Cisco\n- dotenv pour la gestion sécurisée des credentials\n\n**Infrastructure**\n- Switches Cisco Catalyst (IOS)\n- GLPI 10.x avec API REST activée\n- Planificateur Windows Task Scheduler\n\n## 💡 Fonctionnalités développées\n\n### 1. Connexion SSH automatisée\n```python\n# Connexion sécurisée avec gestion d\'erreurs\n- Authentification par clé SSH ou mot de passe\n- Timeout configurable\n- Gestion des erreurs de connexion\n- Logs détaillés\n```\n\n### 2. Collecte d\'informations\nCommandes exécutées sur chaque switch :\n- `show version` : modèle, numéro de série, version IOS\n- `show inventory` : détails matériels (modules, alimentations)\n- `show ip interface brief` : configuration réseau\n- `show vlan` : configuration VLAN\n\n### 3. Parsing intelligent\n- Utilisation de templates TextFSM pour parser les sorties CLI\n- Extraction des données pertinentes (S/N, modèle, version)\n- Normalisation des formats\n\n### 4. Intégration GLPI\n- Authentification API avec session token\n- Vérification de l\'existence de l\'équipement\n- Création ou mise à jour automatique\n- Gestion des erreurs API\n\n## 📊 Architecture du script\n\n```\n1. Chargement liste équipements (CSV/Excel)\n2. Pour chaque switch:\n   ├─ Connexion SSH\n   ├─ Exécution commandes\n   ├─ Parsing des résultats\n   ├─ Appel API GLPI\n   └─ Logs détaillés\n3. Rapport final (succès/échecs)\n```\n\n## 🎯 Résultats et impact\n\n**Avant**\n- ⏱️ 4-6 heures pour inventorier 50 switches\n- ❌ Erreurs de saisie fréquentes\n- 📝 Mise à jour manuelle dans GLPI\n\n**Après**\n- ⚡ 10-15 minutes pour 50 switches\n- ✅ 0 erreur de saisie\n- 🤖 Mise à jour automatique\n- 📊 Planification quotidienne possible\n\n**Gains chiffrés**\n- 95% de réduction du temps d\'inventaire\n- Élimination totale des erreurs humaines\n- Données toujours à jour\n\n## 🎓 Compétences développées\n\nAutomatisation Python, API REST, SSH/Paramiko, parsing de données CLI, intégration GLPI, scripting réseau, gestion d\'erreurs robuste'
WHERE title = 'Automatisation Inventaire GLPI – LNE';

-- 4. Migration Dossiers Publics Exchange
UPDATE projects 
SET content = E'## 📋 Contexte du projet\n\nLe LNE utilisait encore des dossiers publics Exchange (technologie legacy de Microsoft), source de nombreux problèmes : synchronisation aléatoire, performances dégradées, incompatibilité avec Exchange Online. Migration nécessaire vers des boîtes aux lettres partagées modernes.\n\n## 🎯 Objectifs\n\n- Migrer 15+ dossiers publics vers des boîtes aux lettres partagées\n- Préserver l\'intégralité des données et de l\'historique\n- Maintenir les droits d\'accès existants\n- Zéro interruption de service pour les utilisateurs\n\n## 🔧 Technologies et outils\n\n**Environnement**\n- Exchange Server 2016\n- Active Directory pour la gestion des permissions\n- PowerShell Exchange Management Shell\n- Scripts personnalisés de migration\n\n**Méthodologie**\n- Analyse pré-migration\n- Migration par phases\n- Tests de validation\n- Formation des utilisateurs\n\n## 💡 Processus de migration\n\n### Phase 1 : Analyse et planification\n1. **Inventaire complet**\n   - Liste de tous les dossiers publics\n   - Cartographie des droits d\'accès\n   - Mesure du volume de données (50+ Go)\n   - Identification des utilisateurs actifs\n\n2. **Planification**\n   - Priorisation des dossiers par criticité\n   - Définition des fenêtres de migration\n   - Communication aux utilisateurs\n\n### Phase 2 : Création de la structure cible\n```powershell\n# Création boîtes aux lettres partagées\nNew-Mailbox -Shared -Name "NomDossier"\n\n# Configuration des droits\nAdd-MailboxPermission -Identity "NomDossier" \n  -User "Utilisateur" -AccessRights FullAccess\n\nAdd-RecipientPermission -Identity "NomDossier" \n  -Trustee "Utilisateur" -AccessRights SendAs\n```\n\n### Phase 3 : Migration des données\n- Export PST des dossiers publics\n- Import dans les boîtes partagées\n- Vérification de l\'intégrité des données\n- Tests de synchronisation Outlook\n\n### Phase 4 : Migration des permissions\n- Analyse des droits existants\n- Transcription vers les nouvelles permissions\n- Vérification des accès utilisateurs\n- Documentation des changements\n\n### Phase 5 : Tests et validation\n1. ✅ Accès Outlook Desktop\n2. ✅ Accès OWA (Webmail)\n3. ✅ Accès mobile\n4. ✅ Envoi depuis boîte partagée\n5. ✅ Gestion des calendriers partagés\n\n## 🎯 Défis rencontrés et solutions\n\n**Défi 1 : Volume de données important**\n- Solution : Migration par lots, hors heures ouvrées\n\n**Défi 2 : Complexité des permissions**\n- Solution : Script PowerShell d\'export/import des ACL\n\n**Défi 3 : Habitudes utilisateurs**\n- Solution : Formation et documentation illustrée\n\n**Défi 4 : Calendriers publics**\n- Solution : Création de calendriers de groupe Office 365\n\n## 📊 Résultats\n\n**Technique**\n- ✅ 100% des données migrées sans perte\n- ✅ Permissions correctement transcrites\n- ✅ Synchronisation Outlook fiable\n- ✅ Performance améliorée (temps d\'accès divisé par 3)\n\n**Utilisateurs**\n- ✅ Formation de 45 collaborateurs\n- ✅ Documentation complète créée\n- ✅ Support post-migration assuré\n\n**Infrastructure**\n- ✅ Infrastructure simplifiée et modernisée\n- ✅ Préparation à la migration Exchange Online\n- ✅ Gestion facilitée pour les administrateurs\n\n## 🎓 Compétences développées\n\nAdministration Exchange, PowerShell avancé, gestion de permissions, migration de données, gestion de projet, formation utilisateurs'
WHERE title = 'Migration Dossiers Publics Exchange – LNE';

-- 5. Optimisation PDQ Deploy
UPDATE projects 
SET content = E'## 📋 Contexte du projet\n\nPDQ Deploy et Inventory sont des outils critiques pour le déploiement logiciel et l\'inventaire du parc informatique du LNE (300+ postes). Suite à des modifications de la configuration proxy, les téléchargements de packages et les scans automatiques ne fonctionnaient plus.\n\n## 🎯 Objectifs\n\n- Rétablir le fonctionnement de PDQ Deploy/Inventory\n- Résoudre les problèmes de proxy\n- Automatiser la configuration pour éviter les régressions\n- Documenter la solution\n\n## 🔧 Technologies utilisées\n\n**Outils**\n- PDQ Deploy pour le déploiement logiciel\n- PDQ Inventory pour l\'inventaire automatisé\n- PowerShell pour l\'automatisation\n- Windows Server pour l\'hébergement\n\n**Infrastructure**\n- Proxy d\'entreprise avec authentification\n- Active Directory\n- WSUS pour les mises à jour Windows\n\n## 💡 Diagnostic et résolution\n\n### Phase 1 : Diagnostic du problème\n\n**Symptômes observés**\n- ❌ Échec du téléchargement des packages\n- ❌ Scans d\'inventaire bloqués\n- ❌ Timeout sur les connexions externes\n- ❌ Logs montrant "Proxy authentication required"\n\n**Analyse**\n```powershell\n# Test de connectivité\nTest-NetConnection -ComputerName "download.pdq.com" -Port 443\n\n# Vérification proxy\n[System.Net.WebRequest]::GetSystemWebProxy()\n\n# Logs PDQ\nGet-Content "C:\\ProgramData\\Admin Arsenal\\PDQ Deploy\\Logs\\*.log"\n```\n\n### Phase 2 : Solution implémentée\n\n**1. Configuration proxy système**\n```powershell\n# Script de configuration proxy\n$proxyServer = "proxy.lne.local:8080"\n$bypassList = "*.pdq.com;*.microsoft.com;*.local"\n\n# Configuration IE/Edge (utilisé par PDQ)\nSet-ItemProperty -Path "HKCU:\\Software\\Microsoft\\Windows\\CurrentVersion\\Internet Settings" `\n  -Name ProxyServer -Value $proxyServer\nSet-ItemProperty -Path "HKCU:\\Software\\Microsoft\\Windows\\CurrentVersion\\Internet Settings" `\n  -Name ProxyOverride -Value $bypassList\nSet-ItemProperty -Path "HKCU:\\Software\\Microsoft\\Windows\\CurrentVersion\\Internet Settings" `\n  -Name ProxyEnable -Value 1\n```\n\n**2. Exceptions PDQ**\n- Ajout de *.pdq.com au bypass proxy\n- Configuration credentials proxy si nécessaire\n- Test de téléchargement manuel\n\n**3. Configuration service PDQ**\n```powershell\n# Redémarrage service avec nouvelle config\nRestart-Service "PDQ Deploy"\nRestart-Service "PDQ Inventory"\n\n# Vérification\nGet-Service "PDQ*" | Select-Object Name, Status\n```\n\n### Phase 3 : Automatisation\n\n**Script de déploiement GPO**\n```powershell\n# Configuration automatique sur tous les serveurs PDQ\n# Déployé via GPO Startup Script\nif (Test-Path "C:\\Program Files\\Admin Arsenal\\PDQ Deploy") {\n    # Configuration proxy\n    # Ajout bypass list\n    # Redémarrage services\n    # Log résultat\n}\n```\n\n## 📊 Tests de validation\n\n1. ✅ Téléchargement package Adobe Reader\n2. ✅ Scan inventaire complet du parc\n3. ✅ Déploiement automatique Chrome\n4. ✅ Mise à jour automatique des packages\n5. ✅ Vérification logs (aucune erreur proxy)\n\n## 🎯 Résultats et impact\n\n**Avant la résolution**\n- ❌ Déploiements bloqués depuis 2 semaines\n- ❌ Inventaire obsolète\n- ❌ Déploiements manuels fastidieux\n- ⏱️ 2-3 heures par mise à jour logicielle\n\n**Après la résolution**\n- ✅ Déploiements automatiques rétablis\n- ✅ Scans quotidiens opérationnels\n- ✅ Inventaire à jour en temps réel\n- ⚡ 10 minutes pour un déploiement massif\n\n**Gains**\n- 95% de réduction du temps de déploiement\n- Inventaire temps réel fiable\n- Conformité logicielle assurée\n- Sécurité renforcée (mises à jour rapides)\n\n## 📚 Documentation créée\n\n1. Procédure de configuration proxy PDQ\n2. Script PowerShell de déploiement\n3. Guide de dépannage\n4. Checklist de validation\n\n## 🎓 Compétences développées\n\nDépannage Windows, configuration proxy, PowerShell, PDQ Deploy/Inventory, GPO, diagnostic réseau, automatisation'
WHERE title = 'Optimisation PDQ Deploy / Inventory – LNE';

-- Continue with remaining projects...
UPDATE projects 
SET content = E'## 📋 Contexte du projet\n\nLe LNE devait renforcer sa sécurité réseau en limitant l\'accès Internet sur certains postes sensibles et en masquant les paramètres réseau pour éviter les modifications non autorisées. Utilisation des stratégies de groupe (GPO) Active Directory pour un déploiement centralisé.\n\n## 🎯 Objectifs\n\n- Bloquer l\'accès Internet sur les postes sensibles (laboratoires)\n- Désactiver la configuration automatique du proxy\n- Masquer les paramètres réseau aux utilisateurs standards\n- Maintenir la flexibilité pour les administrateurs\n- Assurer la traçabilité des changements\n\n## 🔧 Technologies utilisées\n\n- Active Directory Domain Services\n- Group Policy Management Console (GPMC)\n- Windows Server 2016/2019\n- PowerShell pour l\'automatisation\n- Windows Firewall Advanced Security\n\n## 💡 GPO créées et configurées\n\n### GPO 1 : Blocage Internet postes laboratoire\n\n**Cible** : OU "Laboratoires" (50 postes)\n\n**Configuration**\n```\nComputer Configuration >\n  Policies >\n    Windows Settings >\n      Security Settings >\n        Windows Firewall with Advanced Security >\n          Outbound Rules\n```\n\n**Règles implémentées**\n1. Bloquer tout le trafic HTTP/HTTPS sortant\n2. Autoriser uniquement :\n   - Trafic vers domaine interne (.lne.local)\n   - DNS interne\n   - Serveurs de mise à jour WSUS\n   - Serveurs de fichiers internes\n\n**Résultat** : Isolation complète d\'Internet tout en maintenant l\'accès aux ressources internes\n\n### GPO 2 : Désactivation proxy automatique\n\n**Cible** : Tous les postes du domaine\n\n**Configuration**\n```\nUser Configuration >\n  Policies >\n    Administrative Templates >\n      Windows Components >\n        Internet Explorer\n```\n\n**Paramètres**\n- ✅ Désactiver "Automatically detect settings"\n- ✅ Désactiver "Use automatic configuration script"\n- ✅ Forcer l\'utilisation du proxy défini par GPO\n- ✅ Empêcher modification des paramètres proxy\n\n**Bénéfice** : Uniformité de la configuration, pas de bypass possible\n\n### GPO 3 : Masquage paramètres réseau\n\n**Cible** : Utilisateurs standards (groupe AD "Domain Users")\n\n**Configuration**\n```\nUser Configuration >\n  Policies >\n    Administrative Templates >\n      Network >\n        Network Connections\n```\n\n**Paramètres appliqués**\n- ✅ Interdire l\'accès aux propriétés des connexions réseau\n- ✅ Masquer l\'icône de réseau dans la zone de notification\n- ✅ Empêcher activation/désactivation des cartes réseau\n- ✅ Bloquer modification des paramètres TCP/IP\n- ✅ Interdire modification des paramètres Wi-Fi\n\n**Exceptions** : Groupe "IT-Admins" exclu via Security Filtering\n\n### GPO 4 : Durcissement sécurité générale\n\n**Configuration diverses**\n1. **Mot de passe écran de veille** : Obligatoire après 10 min\n2. **USB** : Lecture seule pour utilisateurs standards\n3. **Windows Update** : Configuration via WSUS uniquement\n4. **AppLocker** : Whitelist des applications autorisées\n\n## 📊 Architecture des GPO\n\n```\nDomaine LNE.local\n├─ Default Domain Policy (baseline sécurité)\n├─ GPO-SecuriteReseau-Laboratoires\n│  └─ OU=Laboratoires\n├─ GPO-ProxyConfiguration\n│  └─ Domaine entier\n├─ GPO-MasquageReseau-Users\n│  └─ Domaine entier (sauf IT-Admins)\n└─ GPO-DurcissementSecurite\n   └─ Domaine entier\n```\n\n## 🎯 Tests et validation\n\n**Tests utilisateur standard**\n1. ✅ Accès Internet bloqué sur poste labo\n2. ✅ Impossibilité de modifier le proxy\n3. ✅ Paramètres réseau masqués\n4. ✅ Pas de contournement possible\n\n**Tests administrateur**\n1. ✅ Accès total aux paramètres réseau\n2. ✅ Gestion normale des connexions\n3. ✅ Aucune restriction IT\n\n**Validation sécurité**\n- Test de bypass : échec ✅\n- Test élévation privilèges : bloqué ✅\n- Audit de conformité : 100% ✅\n\n## 📊 Résultats et impact\n\n**Sécurité renforcée**\n- ✅ Postes sensibles isolés d\'Internet\n- ✅ Configuration réseau uniforme et sécurisée\n- ✅ Impossibilité de modification par utilisateurs\n- ✅ Réduction de la surface d\'attaque\n\n**Gestion simplifiée**\n- ✅ Déploiement centralisé via GPO\n- ✅ Application automatique aux nouveaux postes\n- ✅ Maintenance facilitée\n- ✅ Traçabilité complète (Event Viewer)\n\n**Conformité**\n- ✅ Conformité aux exigences ISO 27001\n- ✅ Séparation des responsabilités\n- ✅ Journalisation des changements\n\n## 📚 Documentation créée\n\n1. **Documentation technique**\n   - Architecture des GPO\n   - Paramètres détaillés\n   - Ordre de traitement\n\n2. **Procédures**\n   - Ajout d\'un poste aux laboratoires\n   - Exemption d\'un utilisateur\n   - Rollback en cas de problème\n\n3. **Guide dépannage**\n   - GPO non appliquée\n   - Conflits de stratégies\n   - Vérification application (gpresult)\n\n## 🎓 Compétences développées\n\nStratégies de groupe Active Directory, sécurité Windows, Windows Firewall, gestion des permissions, hardening système, documentation technique'
WHERE title = 'Sécurisation Réseau via GPO – LNE';